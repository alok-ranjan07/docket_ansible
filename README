# build master image
docker build -t alokranjan2000/ansible_master_node -f Dockerfile_ansible_master .
# push master image to docker hub
docker push alokranjan2000/ansible_master_node
# run container from master image
docker run -d -v ansible_volume:/etc/ansible --name master_node alokranjan2000/ansible_master_node
# show content of public key
docker exec -it master_node cat /home/ansible/.ssh/id_rsa.pub


# build target image
docker build -t alokranjan2000/ansible_target_node -f Dockerfile_ansible_target .
# push master image to docker hub
docker push alokranjan2000/ansible_target_node
# run container from master image
docker run -d -v ansible_volume:/etc/ansible --name target_node1 alokranjan2000/ansible_target_node
docker run -d -v ansible_volume:/etc/ansible --name target_node2 alokranjan2000/ansible_target_node
docker run -d -v ansible_volume:/etc/ansible --name target_node3 alokranjan2000/ansible_target_node
docker run -d -v ansible_volume:/etc/ansible --name target_node4 alokranjan2000/ansible_target_node
# update inventory file with target nodes ip addresses
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' target_node1
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' target_node2
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' target_node3
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' target_node4
# copy ansible playbook to master node
docker cp ./ansible master_node:/etc/
# copy public key to target nodes
docker cp authorized_keys target_node1:/home/ansible/.ssh/authorized_keys
docker cp authorized_keys target_node2:/home/ansible/.ssh/authorized_keys
docker cp authorized_keys target_node3:/home/ansible/.ssh/authorized_keys
docker cp authorized_keys target_node4:/home/ansible/.ssh/authorized_keys
# lock key file
docker exec -it target_node1 chattr -i /home/ansible/.ssh/authorized_keys
docker exec -it target_node2 chattr -i /home/ansible/.ssh/authorized_keys
docker exec -it target_node3 chattr -i /home/ansible/.ssh/authorized_keys
docker exec -it target_node4 chattr -i /home/ansible/.ssh/authorized_keys
# execute ansible-playbook on master node to check ping status on target nodes
docker exec -it master_node ansible all -m ping -e "ansible_user=ansible"
# stop master container
docker stop target_node1 target_node2 target_node3 target_node4 master_node
# remove master container
docker rm target_node1 target_node2 target_node3 target_node4 master_node
# remove master image
docker rmi alokranjan2000/ansible_target_node
# remove target image
docker rmi alokranjan2000/ansible_master_node




# push master image to docker hub
docker pull alokranjan2000/ansible_target_node
# login to master container
docker exec -it target_node1 /bin/bash
docker exec -it target_node2 /bin/bash
docker exec -it target_node3 /bin/bash
docker exec -it target_node4 /bin/bash
# check if ssh server is running on target nodes
docker exec -it target_node1 ss -tlnp
docker exec -it target_node2 ss -tlnp
docker exec -it target_node3 ss -tlnp
docker exec -it target_node4 ss -tlnp
# push master image to docker hub
docker pull alokranjan2000/ansible_master_node
# login to master container
docker exec -it master_node /bin/bash
# stop master container
docker stop master_node
# remove master container
docker rm master_node




# with docker compose    
docker compose up -d




# with docker swarm
docker swarm init
docker network create -d overlay ansible_net
docker build -t alokranjan2000/ansible_master_node -f Dockerfile_ansible_master .
docker push alokranjan2000/ansible_master_node
docker build -t alokranjan2000/ansible_target_node -f Dockerfile_ansible_target .
docker push alokranjan2000/ansible_target_node

# create ansible stack
docker stack deploy -c docker-compose.yml ansible_stack

# After services up
python generate_inventory.py
# or
node generate_inventory.js

# Run playbook
docker exec -it $(docker ps -q --filter name=ansible_stack_master) ansible-playbook /etc/ansible/playbook/playbook.yml -u ansible

# to scale target nodes
docker service scale ansible_stack_target=10
python generate_inventory.py
# or
node generate_inventory.js

# Check the result
docker service ps ansible_stack_target

# destroy all services
docker stack rm ansible_stack